
trigger:
- main

pool:
  #vmImage: ubuntu-latest
  name: pool-anext

parameters:
  - name: tagName
    displayName: "Containers image tag"
    type: string
    default: latest

  - name: containerRegistry
    displayName: "Container registry service connection"
    type: string
    default: anext.azurecr.io

  - name: kubernetesCluster
    displayName: "Kubernetes service connection"
    type: string
    default: k8s-test

  - name: namespace
    displayName: "Kubernetes Namespace"
    type: string
    default: test-app

  - name: repositoryName
    displayName: "Container repository name"
    type: string
    default: container-test-app

stages:

  - stage: Build
    jobs:
    - job: build
      steps:

        - checkout: self

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              pwd
              ls -laFh

        - task: Docker@2
          displayName: "Build frontend"
          inputs:
            containerRegistry: '${{ parameters.containerRegistry }}'
            repository: '${{ parameters.repositoryName }}'
            command: 'buildAndPush'
            Dockerfile: 'frontend.Dockerfile'
            buildContext: 'frontend'
            tags: 'frontend-${{ parameters.tagName }}'

        - task: Docker@2
          displayName: "Build backend"
          inputs:
            containerRegistry: '${{ parameters.containerRegistry }}'
            repository: '${{ parameters.repositoryName }}'
            command: 'buildAndPush'
            Dockerfile: 'backend.Dockerfile'
            buildContext: 'backend'
            tags: 'backend-${{ parameters.tagName }}'

  - stage: Deploy
    jobs:
    - job: build
      steps:

        - checkout: self

        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '${{ parameters.kubernetesCluster }}'
            namespace: '${{ parameters.namespace }}'
            command: 'login'

        - task: KubernetesManifest@0
          inputs:
            action: 'createSecret'
            kubernetesServiceConnection: '${{ parameters.kubernetesCluster }}'
            secretType: 'dockerRegistry'
            namespace: '${{ parameters.namespace }}'
            secretName: '${{ parameters.containerRegistry }}'
            dockerRegistryEndpoint: '${{ parameters.containerRegistry }}'


        - task: HelmInstaller@0
          inputs:
            helmVersion: '2.14.1'
            installKubectl: true

        - task: HelmDeploy@0
          inputs:
            command: 'package'
            chartPath: 'helm/sample-app'
            chartVersion: '1.0'

        - task: HelmDeploy@0
          displayName: "Deploy Frontend"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.kubernetesCluster }}'
            namespace: '${{ parameters.namespace }}'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(Build.ArtifactStagingDirectory)/sample-app-1.0.tgz'
            chartVersion: '1.0'
            releaseName: '${{ parameters.repositoryName }}-front'
            valueFile: 'helm/values/frontend.yaml'
            resetValues: true

        - task: HelmDeploy@0
          displayName: "Deploy Backend"
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: '${{ parameters.kubernetesCluster }}'
            namespace: '${{ parameters.namespace }}'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(Build.ArtifactStagingDirectory)/sample-app-1.0.tgz'
            chartVersion: '1.0'
            releaseName: '${{ parameters.repositoryName }}-back'
            valueFile: 'helm/values/backend.yaml'
            resetValues: true